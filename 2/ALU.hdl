// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // zx first
    Mux16(a=x , b=false , sel=zx , out=x_pre0 );

    // nx second
    Not16(in=x_pre0, out=notx);
    Mux16(a=x_pre0, b=notx, sel=nx, out=x_pre);

    // zy first
    Mux16(a=y, b=false, sel=zy, out=y_pre0);
    
    // ny second
    Not16(in=y_pre0, out=noty);
    Mux16(a=y_pre0, b=noty, sel=ny, out=y_pre);

    // if f
    // then out=x+y
    Add16(a=x_pre, b=y_pre, out=x_plus_y);
    // else out=x&y
    And16(a=x_pre, b=y_pre, out=x_and_y);

    Mux16(a=x_and_y, b=x_plus_y, sel=f, out=out_pre);

    // if no, then out=!=out
    Not16(in=out_pre, out=notPreOut);
    Mux16(a=out_pre, b=notPreOut, sel=no, out[15]=ng, out=out, out=outInternal);
    
    Not16(
        in=outInternal,
        out[15]=out15,
        out[14]=out14,
        out[13]=out13,
        out[12]=out12,
        out[11]=out11,
        out[10]=out10,
        out[9]=out9,
        out[8]=out8,
        out[7]=out7,
        out[6]=out6,
        out[5]=out5,
        out[4]=out4,
        out[3]=out3,
        out[2]=out2,
        out[1]=out1,
        out[0]=out0,
    );

    And(a=out0, b=out1, out=And0);
    And(a=And0, b=out2, out=And1);
    And(a=And1, b=out3, out=And2);
    And(a=And2, b=out4, out=And3);
    And(a=And3, b=out5, out=And4);
    And(a=And4, b=out6, out=And5);
    And(a=And5, b=out7, out=And6);
    And(a=And6, b=out8, out=And7);
    And(a=And7, b=out9, out=And8);
    And(a=And8, b=out10, out=And9);
    And(a=And9, b=out11, out=And10);
    And(a=And10, b=out12, out=And11);
    And(a=And11, b=out13, out=And12);
    And(a=And12, b=out14, out=And13);
    And(a=And13, b=out15, out=zr);
}


















